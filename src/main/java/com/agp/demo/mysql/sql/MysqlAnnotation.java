package com.agp.demo.mysql.sql;

/**
 * 飞豚:
 * 如何做MySQL压测
 *
 * 飞豚:
 * 关注哪些指标？
 *
 * 飞豚:
 * 什么时候算极限？
 * 一般的常见配置MySQL并发能力如何？举几个你知道的例子？
 * 讲讲MySQL的数据模型，逻辑模型和物理模型分别是什么样的？
 * MySQL是如何保证宕机不丢失数据的？》
 * MySQL有几种log？作用分别是什么？
 * 什么是MySQL的数据预加载？有无问题？如何避免？
 *
 *
 *InnoDB存储引擎表是索引组织的（indexorganized），因此数据即索引，索引即数据
 *
 * Myisam与innodb引擎,索引文件的区别：
 * innodb的次索引指向对主键的引用。主键索引指向物理行。
 * myisam的次索引和主索引都指向物理行。
 *
 * myisam一行一行的插入，会产生一行一行的文件，磁盘上有数据文件。
 * tree树的值是磁盘上物理位置的指针。
 *
 * 比如加了主键索引，索引排成一棵树的形状。首先根据id=7在主键索引的树上查找，查找到7之后就知道了7所在的物理行，然后就可以找到id=7的那一行数据了。
 * 还有一个cat_id索引，根据cat_id=15可以找到数据所在的物理行。
 * 所以说myisam的次索引和主索引都指向物理行。
 *
 *
 */
public class MysqlAnnotation {

    /*
    * innodb的主索引文件上 直接存放该行数据,称为聚簇索引,次索引指向对主键的引用。
        myisam中, 主索引和次索引,都指向物理行(磁盘位置)。

        注意: innodb来说,
        1: 主键索引 既存储索引值,又在叶子中存储行的数据
        2: 如果没有主键, 则会Unique key做主键
        3: 如果没有unique,则系统生成一个内部的rowid做主键.
        4: 像innodb中,主键的索引结构中,既存储了主键值,又存储了行数据,这种结构称为"聚簇索引"


        聚簇索引
        优势: 根据主键查询条目比较少时,不用回行(数据就在主键节点下)
        劣势: 如果碰到不规则数据插入时,造成频繁的页分裂.

        myisam中对于索引文件是要放在内存中缓存起来的。
        * 节点会分裂：原来19的节点后来来了15和13，则19的位置换成13，
        * 并在下面添加15，19。对于聚簇索引就很严重。对于myisam没什么，对于innodb就很麻烦。
        *
        *
        * 数据段即为B+树的叶子节点，
        * 索引段即为B+树的非索引节点
    * */
    /**高性能索引策略
     对于innodb而言,因为节点下有数据文件,因此节点的分裂将会比较慢.
     对于innodb的主键,尽量用整型,而且是递增的整型.
     如果是无规律的数据,将会产生的页的分裂,影响速度.*/

    /*区是由连续页组成的空间，在任何情况下每个区的大小都为1MB。
    为了保证区中页的连续性，InnoDB存储引擎一次从磁盘申请4～5个区
    。在默认情况下，InnoDB存储引擎页的大小为16KB，即一个区中一共有64个连续的页
    InnoDB 1.2.x版本新增了参数innodb_page_size 可以更改分页大小。
    区的大小总是为1M，里面分页数量会根据page_size相反改变

    页是InnoDB磁盘管理的最小单位


    B+树是为磁盘或其他直接存取辅助设备设计的一种平衡查找树。
    在B+树中，所有记录节点都是按
    键值的大小顺序存放
    在同一层的叶子节点上，
    由各叶子节点指针进行连接


    聚集索引（clustered index）就是
    按照每张表的主键构造一棵B+树，
    同时叶子节点中存放的即为整张表的行记录数据


    如果聚集索引必须按照特定顺序存放物理记录，
    则维护成本显得非常之高。所以，
    聚集索引的存储并不是物理上连续的，
    而是逻辑上连续的



    * */
}
