package com.agp.demo.es;

/**
 * 选举master主节点--》选取集群元信息--》选取shard元信息
 * 选举shard级元信息，构建内容路由表，是在allocation模块完成的。
 *
 * 在初始阶段，所有的shard都处于UNASSIGNED（未分配）状态。
 * ES中通过 分配过程 决定哪个分片位于哪个节点，重构内容路由表。
 *此时，首先要做的是分配主分片。
 * 1． 选主分片
 *
 *      现在看某个主分片[website][0]是怎么分配的。
 *      所有的分配工作都是 Master 来做的，
 *      此时， Master不知道主分片在哪，它向集群的所有节点询问：
 *      大家把[website][0]分片的元信息发给我。
 *      然后，Master 等待所有的请求返回，
 *      正常情况下它就有了这个 shard 的信息，
 *      然后根据某种策略选一个分片作为主分片。是
 *          不是效率有些低？
 *      这种询问量=shard 数×节点数。所以说我们最好控制shard的总规模别太大。
 *
 *      现在考虑把哪个分片作为主分片。
 *      ES 5.x以下的版本，通过对比 shard级元信息 的 版本号 来决定。
 *      在多副本的情况下，考虑到如果只有一个 shard 信息汇报上来，则它一定会被选为主分片，
 *      但也许数据不是最新的，版本号比它大的那个shard所在节点还没启动。
 *
 *      在解决这个问题的时候，ES 5.x开始实施一种新的策略：
     *      给每个 shard 都设置一个 UUID，然后在集群级的元信息中记录哪个shard是最新的，
     *      因为ES是先写主分片，再由主分片节点转发请求去写副分片
     *      所以主分片所在节点肯定是最新的
 *
 *
 *      如果它转发失败了，则要求Master删除那个节点。
 *      从ES 5.x开始，主分片选举过程是通过集群级元信息中记录的
 *      “最新主分片的列表”来确定主分片的：
 *          汇报信息中存在，并且这个列表中也存在。
 *
 *      如果集群设置了：
 *       ＂cluster.routing.allocation.enable＂: ＂none＂
 *       禁止分配分片，集群仍会强制分配主分片
 *
 *   2． 选副分片
 *      主分片选举完成后，从上一个过程汇总的 shard 信息中选择一个副本作为副分片。
 *      如果汇总信息中不存在，
 *      则分配一个全新副本的操作依赖于延迟配置项：
 *      index.unassigned.node_left.delayed_timeout
 *
 *      我们的线上环境中最大的集群有100+节点，掉节点的情况并不罕见，
 *      很多时候不能第一时间处理，这个延迟我们一般配置为以天为单位。
 *      最后，allocation过程中允许新启动的节点加入集群。
 *
 *
 *
 *
 *
 *
 */
public class 选举shard {
}
